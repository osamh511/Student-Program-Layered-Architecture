Namespace DomainModels '← الكائنات والبيانات
    '  مـــلاحظة
    '🧱 1. الكائن مستقل في التمثيل
    '''📌 هذا الكائن عبارة عن نموذج بيانات يحتوي على خصائصه كاملة ↪️ لا يعتمد على بيانات من الخارج في عمليات التنفيذ
    '''↪️ كل عملية تعتمد على ما هو داخل الكائن، وهو ما يجعل تمثيله داخليًا موثوقًا


    '🧑‍💻 برمجياً:
    'كلاس يمثل كائن البيانات داخل النظام
    '🧠 خوارزمياً:
    'يتم إنشاء نسخة من الكائن بناءً على مدخلات المستخدم ثم يُمرر بين الطبقات
    Public Class STUDENT4 '🧠 يمثل كائن البيانات الذي يُنقل بين الطبقات
        '''        🔒 3. كيف هذا يحافظ على العقد الداخلي للكائن؟
        '''        ✅ العقد = واجهة STUDENT4 توفر خصائص ثابتة:
        '''vbnet
        '''Public Property Id As Integer
        '''        Public Property Name As String
        '''        Public Property Age As Integer
        '''📌 ما يميز العقد هنا:
        '''لا توجد دوال مثل SetName(name As String) أو PrintStudent(name)
        '''لا حاجة لتمرير البيانات على مراحل أو عبر مدخلات أثناء التنفيذ
        '''🎯 لذلك:
        '''الكائن مكتمل بالخصائص عند إنشائه
        '''كل العمليات تتعامل معه كمجموعة موحدة
        '''هذا يحمي الكود من التعقيد ويضمن صحة المنطق
        Public Property Id As Integer
        Public Property Name As String
        Public Property Age As Integer

        ''' <summary>
        ''' تعرض وصفًا موجزًا للكائن بناءً على بياناته الداخلية
        ''' ↪️ هذه الدالة لا تحتاج أي مدخلات خارجية ↪️ الكائن يقرأ بياناته الخاصة ويعرض نفسه ذاتيًا ↪️ وهذا يعزز استقلاليته ويقوي العقد الداخلي حسب فلسفة LSP
        ''' </summary>
        ''' <returns>سلسلة نصية تمثل الطالب</returns>
        Public Function Describe() As String '↪️ هذه الدالة لا تحتاج أي مدخلات خارجية ↪️ الكائن يقرأ بياناته الخاصة ويعرض نفسه ذاتيًا ↪️ وهذا يعزز استقلاليته ويقوي العقد الداخلي حسب فلسفة LSP
            Return $"🧑‍🎓 الطالب: {Name}, عمره: {Age}, رقمه: {Id}"
        End Function

    End Class
End Namespace